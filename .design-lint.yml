# Purpose: Configuration for design principles linting and code quality metrics
# Scope: Repository-wide design pattern and SOLID principles enforcement
# Overview: Comprehensive configuration defining quantitative thresholds and validation rules for
#     enforcing SOLID principles and design patterns throughout the codebase. Establishes specific
#     metrics for Single Responsibility Principle (max 7 methods per class, min 0.3 cohesion),
#     Open/Closed Principle (max 2 modifications per month, requires abstract bases), Liskov
#     Substitution (signature compatibility, exception handling), Interface Segregation (max 5
#     interface methods), and Dependency Inversion (mandatory dependency injection). Includes
#     code smell detection for 10+ anti-patterns, coupling/cohesion metrics, complexity limits,
#     and automated refactoring suggestions. Supports gradual enforcement with configurable
#     severity levels (error/warning/info) and path-based exclusions for test files.
# Dependencies: Design linter tools, SRP analyzer, ISP/OCP/LSP/DIP checkers
# Exports: Configuration parameters for design principle validation
# Interfaces: Read by design linters to enforce architectural standards
# Implementation: YAML configuration with principle-specific thresholds

# Design Principles Linting Configuration

# Single Responsibility Principle
srp:
  max_methods_per_class: 15  # Increased from 7 - more realistic for complex classes
  max_method_groups: 4  # Increased from 3 - allow more flexibility
  max_class_lines: 300  # Increased from 200 - accommodate larger but focused classes
  max_instance_variables: 10  # Increased from 7 - more realistic
  max_dependencies: 8  # Increased from 5 - allow more dependencies
  min_cohesion_score: 0.05  # Much more lenient - focus on obvious violations only

  # Naming patterns that indicate SRP violations
  violation_patterns:
    - "and"  # UserManagerAndValidator
    - "or"   # SaveOrUpdate
    - "with" # ProcessWithValidation

  # Method prefixes for responsibility detection
  responsibility_groups:
    data_access: [get, fetch, load, read, query, find, search]
    data_mutation: [set, save, write, update, delete, create, insert, remove]
    validation: [validate, verify, check, ensure, assert, confirm]
    transformation: [convert, transform, parse, format, serialize, deserialize]
    notification: [send, notify, email, alert, publish, broadcast]
    calculation: [calculate, compute, process, analyze, aggregate]
    rendering: [render, display, draw, show, print, format]
    authentication: [login, logout, authenticate, authorize, verify]
    configuration: [configure, setup, init, register, bootstrap]

# Open/Closed Principle
ocp:
  max_modifications_per_month: 2
  max_conditional_branches: 3
  max_switch_cases: 5
  require_abstract_base: true

  # Patterns that indicate OCP violations
  violation_patterns:
    - multiple_isinstance_checks
    - type_switching
    - hardcoded_types

# Liskov Substitution Principle
lsp:
  enforce_signature_compatibility: true
  prevent_exception_narrowing: true
  prevent_precondition_strengthening: true
  prevent_postcondition_weakening: true

  violations:
    - NotImplementedError_in_subclass
    - different_return_types
    - incompatible_parameters

# Interface Segregation Principle
isp:
  max_interface_methods: 5
  max_unused_interface_methods: 0
  require_role_interfaces: true

  violations:
    - fat_interface
    - unused_interface_methods
    - god_interface

# Dependency Inversion Principle
dip:
  allow_direct_instantiation: false
  require_dependency_injection: true
  max_concrete_dependencies: 2

  violations:
    - direct_instantiation
    - concrete_imports
    - missing_abstractions

# General Design Metrics
metrics:
  # Coupling metrics
  max_afferent_coupling: 7  # Classes depending on this
  max_efferent_coupling: 5  # Classes this depends on
  max_coupling_between_objects: 4

  # Cohesion metrics
  min_cohesion_ratio: 0.7
  max_lcom: 1  # Lack of Cohesion of Methods

  # Complexity metrics
  max_cyclomatic_complexity: 5  # Already enforced by Radon
  max_cognitive_complexity: 10  # Increased from 7 - allow more complex logic
  max_nesting_depth: 4  # Increased from 3 - more realistic for real-world code

  # Size metrics
  max_file_lines: 400  # Increased from 250 - allow larger files for complex modules
  max_class_lines: 300  # Increased from 200 - match SRP setting
  max_method_lines: 75  # Increased from 50 - more realistic for complex methods
  max_parameters: 5  # Increased from 3 - allow more parameters

# Code Smell Detection
code_smells:
  detect_feature_envy: true
  detect_data_clumps: true
  detect_primitive_obsession: true
  detect_long_parameter_list: true
  detect_message_chains: true
  detect_middle_man: true
  detect_inappropriate_intimacy: true
  detect_lazy_class: true
  detect_dead_code: true
  detect_speculative_generality: true

# Refactoring Suggestions
suggest_refactoring:
  extract_class: true
  extract_method: true
  extract_interface: true
  introduce_parameter_object: true
  replace_conditional_with_polymorphism: true
  replace_type_code_with_class: true

# Enforcement Levels
enforcement:
  # Options: error, warning, info, off
  srp: warning  # Changed from error - less aggressive on SRP violations
  ocp: info  # Changed from warning - OCP violations are often design choices
  lsp: warning  # Keep as warning - important for correctness
  isp: info  # Changed from warning - interface design is often contextual
  dip: info  # Changed from warning - dependency patterns vary by project
  code_smells: info

  # Allow overrides with justification
  allow_overrides: true
  require_justification: true

  # Gradual enforcement
  grace_period_days: 30
  legacy_code_exempt: false

# Exclusions
exclude:
  paths:
    - "*/tests/*"
    - "*/test_*.py"
    - "*_test.py"
    - "*/migrations/*"
    - "*/vendor/*"
    - "*/node_modules/*"
    - "*/examples/*"
    - "tools/design_linters/examples/*"

  classes:
    - "*Test"
    - "*TestCase"
    - "Mock*"
    - "*Stub"

  files:
    - "setup.py"
    - "conftest.py"
    - "__init__.py"

# Reporting
reporting:
  format: "json"  # Options: json, html, markdown, console
  output_file: "design-lint-report.json"
  include_metrics: true
  include_suggestions: true
  generate_diagrams: false

  # Metrics tracking over time
  track_trends: true
  trend_file: ".design-metrics-history.json"

  # Integration with code review
  post_to_pr: true
  block_merge_on_error: true

# Custom Rules
custom_rules:
  - name: "No God Classes"
    type: "class"
    condition: "methods > 20 OR lines > 500"
    severity: "error"
    message: "Class is too large and likely has multiple responsibilities"

  - name: "No Manager Classes"
    type: "class_name"
    pattern: ".*Manager$"
    severity: "warning"
    message: "Manager classes often violate SRP. Consider more specific naming"

  - name: "Dependency Injection Required"
    type: "constructor"
    condition: "no_parameters AND has_dependencies"
    severity: "error"
    message: "Classes with dependencies should use constructor injection"

# File Organization Rules
organization:
  file_placement:
    enabled: true
    severity: "warning"

    # Use JSON layout file for comprehensive file placement rules
    layout_rules_file: ".ai/layout.yaml"

    message: "Files should be organized according to project structure conventions"

# Documentation Standards
documentation:
  # Breadcrumb Navigation Requirements
  breadcrumbs:
    enabled: true
    enforce_on_html: true
    require_aria_labels: true
    require_home_link: true
    severity: "error"

    exclude_patterns:
      - "*/test/*"
      - "*/template/*"
      - "*/mock/*"
      - "index.html"

    message: "All HTML documentation must include breadcrumb navigation for better user experience"
