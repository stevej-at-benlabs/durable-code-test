[tool.poetry]
name = "durable-code-backend"
version = "0.1.0"
description = "Backend API for Durable Code Test"
authors = ["Your Name <you@example.com>"]
readme = "README.md"
packages = [{include = "app"}]

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.116.1"
uvicorn = {extras = ["standard"], version = "^0.35.0"}
python-dotenv = "^1.1.1"
pydantic = "^2.11.7"
websockets = "^13.0.0"
slowapi = "^0.1.9"
[tool.poetry.group.dev.dependencies]
pytest = "^8.4.2"
pytest-cov = "^4.1.0"
black = "^25.1.0"
ruff = "^0.13.0"
mypy = "^1.18.1"
radon = "^6.0.1"
bandit = "^1.7.5"
safety = "^3.0.0"
pylint = "^3.0.0"
isort = "^5.13.2"
flake8 = "^7.0.0"
flake8-docstrings = "^1.7.0"
flake8-bugbear = "^24.0.0"
flake8-comprehensions = "^3.14.0"
flake8-simplify = "^0.21.0"
xenon = "^0.9.1"
typer = "^0.12.0"
pip-audit = "^2.9.0"
loguru = "^0.7.3"
httpx = "^0.28.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 120
target-version = ['py311']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
check_untyped_defs = true
strict_equality = true
exclude = [
    'tools/design_linters/.*',
    'tools/simple_print_check\.py'
]

[tool.ruff]
target-version = "py311"
line-length = 120
cache-dir = "/tmp/.ruff_cache"
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    ".mypy_cache",
    ".pytest_cache",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "SIM", # flake8-simplify
    "S",   # flake8-bandit
    "C90", # mccabe complexity
]
ignore = ["E501", "B008", "C901", "S101"]

[tool.ruff.lint.mccabe]
max-complexity = 5  # Enforces Radon complexity A

[tool.pylint.messages_control]
max-line-length = 120
disable = [
    "C0111", # missing-docstring
    "C0103", # invalid-name
    "R0903", # too-few-public-methods
    "R0913", # too-many-arguments
    "W0212", # protected-access
    "E0213", # no-self-argument (false positive for Pydantic validators)
    "W0613", # unused-argument (false positive for FastAPI request parameters)
    "C0415", # import-outside-toplevel (sometimes required for FastAPI setup)
    "W0718", # broad-exception-caught (intentional for security error handling)
]

[tool.pylint.design]
# Complexity is handled by Radon and Ruff/mccabe
max-args = 5
max-locals = 15
max-returns = 6
max-branches = 12
max-statements = 50

[tool.bandit]
exclude_dirs = ["/tests/", "/test/"]
skips = ["B101"]  # Skip assert_used test

[tool.pytest.ini_options]
testpaths = ["test"]  # Use mounted test directory
python_files = ["test_*.py", "*_test.py"]
addopts = "--tb=short"
cache_dir = "/tmp/.pytest_cache"
markers = [
    "integration: marks tests as integration tests (may require external services)"
]

[tool.coverage.run]
source = ["app"]
omit = ["*/tests/*", "*/test/*", "*/__init__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.radon]
cc_min = "A"  # Enforce complexity A
mi_min = "A"  # Enforce maintainability index A
exclude = "tests/*,test/*"
