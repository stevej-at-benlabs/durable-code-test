################################################################################
# Simplified Linting Makefile
################################################################################
#
# Essential linting targets:
#   make lint-all         - Run all common Python/JS linters
#   make lint-tool TOOL=  - Run a specific linter tool
#   make lint-custom CAT= - Run custom linters by category
#   make lint-fix         - Auto-fix formatting issues
#   make lint-list-rules  - List custom linting rules
#   make lint-categories  - List custom rule categories
#
################################################################################

.PHONY: lint-all lint-tool lint-custom lint-fix lint-list-rules lint-categories

# Run all linters: common tools + custom rules
lint-all: dev-start ## Run ALL linters (Python: Black, isort, Ruff, Flake8, MyPy, Pylint, Bandit, Xenon; JS: ESLint, Prettier, TypeScript; Custom: all design rules)
	@echo "$(CYAN)╔════════════════════════════════════════════════════════════╗$(NC)"
	@echo "$(CYAN)║                  Running ALL Linters                      ║$(NC)"
	@echo "$(CYAN)╚════════════════════════════════════════════════════════════╝$(NC)"
	@echo ""
	@echo "$(YELLOW)━━━ Python Linters ━━━$(NC)"
	@docker exec durable-code-backend-dev bash -c "cd /app && \
		echo '• Black...' && poetry run black --check app tools && \
		echo '• isort...' && poetry run isort --check-only app tools && \
		echo '• Ruff...' && poetry run ruff check app tools && \
		echo '• Flake8...' && flake8_app=\$$(poetry run flake8 app --count 2>/dev/null || echo '0') && flake8_tools=\$$(poetry run flake8 tools --config tools/.flake8 --count 2>/dev/null || echo '0') && echo \"  App violations: \$$flake8_app, Tools violations: \$$flake8_tools\" && \
		echo '• MyPy...' && MYPY_CACHE_DIR=/tmp/mypy_cache poetry run mypy . && \
		echo '• Pylint...' && poetry run pylint app tools 2>&1 | tee /tmp/pylint.out && grep -q 'Your code has been rated at 10.00/10' /tmp/pylint.out && \
		echo '• Bandit...' && poetry run bandit -r app tools && \
		echo '• Xenon...' && poetry run xenon --max-absolute B --max-modules B --max-average A app tools" || (echo "$(RED)✗ Python linting failed$(NC)" && exit 1)
	@echo "$(GREEN)✓ Python linting passed$(NC)"
	@echo ""
	@echo "$(YELLOW)━━━ TypeScript/React Linters ━━━$(NC)"
	@docker exec durable-code-frontend-dev sh -c "\
		echo '• TypeScript...' && npm run typecheck && \
		echo '• ESLint...' && npm run lint && \
		echo '• Prettier...' && npm run format:check" || (echo "$(RED)✗ Frontend linting failed$(NC)" && exit 1)
	@echo "$(GREEN)✓ Frontend linting passed$(NC)"
	@echo ""
	@echo "$(YELLOW)━━━ Custom Design Linters ━━━$(NC)"
	@docker exec durable-code-backend-dev bash -c "cd /app && \
		echo '• SOLID principles...' && PYTHONPATH=/app/tools python -m design_linters --categories solid --format text --recursive app tools && \
		echo '• Style rules...' && PYTHONPATH=/app/tools python -m design_linters --categories style --format text --recursive app tools && \
		echo '• Magic literals...' && PYTHONPATH=/app/tools python -m design_linters --categories literals --format text --recursive app tools && \
		echo '• Logging practices...' && PYTHONPATH=/app/tools python -m design_linters --categories logging --format text --recursive app tools && \
		echo '• Loguru usage...' && PYTHONPATH=/app/tools python -m design_linters --categories loguru --format text --recursive app tools" || (echo "$(RED)✗ Custom linting failed$(NC)" && exit 1)
	@echo "$(GREEN)✓ Custom design linting passed$(NC)"
	@echo ""
	@echo "$(GREEN)✅ ALL linting checks passed!$(NC)"

# Run a specific linter tool
lint-tool: dev-start ## Run a specific linter tool (e.g., make lint-tool TOOL=black)
	@if [ -z "$(TOOL)" ]; then \
		echo "$(RED)Error: TOOL parameter is required$(NC)"; \
		echo "$(YELLOW)Usage: make lint-tool TOOL=<tool>$(NC)"; \
		echo "$(YELLOW)Available tools:$(NC)"; \
		echo "  Python: black, isort, ruff, flake8, mypy, pylint, bandit, radon, xenon"; \
		echo "  Frontend: eslint, prettier, typecheck"; \
		exit 1; \
	fi
	@echo "$(CYAN)Running $(TOOL)...$(NC)"
	@case "$(TOOL)" in \
		black) docker exec durable-code-backend-dev bash -c "cd /app && poetry run black --check app tools" ;; \
		isort) docker exec durable-code-backend-dev bash -c "cd /app && poetry run isort --check-only app tools" ;; \
		ruff) docker exec durable-code-backend-dev bash -c "cd /app && poetry run ruff check app tools" ;; \
		flake8) docker exec durable-code-backend-dev bash -c "cd /app && echo 'Checking app...' && flake8_app=\$$(poetry run flake8 app --count 2>/dev/null || echo '0') && echo \"App violations: \$$flake8_app\" && echo 'Checking tools...' && flake8_tools=\$$(poetry run flake8 tools --config tools/.flake8 --count 2>/dev/null || echo '0') && echo \"Tools violations: \$$flake8_tools\"" ;; \
		mypy) docker exec durable-code-backend-dev bash -c "cd /app && MYPY_CACHE_DIR=/tmp/mypy_cache poetry run mypy ." ;; \
		pylint) docker exec durable-code-backend-dev bash -c "cd /app && poetry run pylint app tools" ;; \
		bandit) docker exec durable-code-backend-dev bash -c "cd /app && poetry run bandit -r app tools" ;; \
		radon) docker exec durable-code-backend-dev bash -c "cd /app && poetry run radon cc app tools -s -n A" ;; \
		xenon) docker exec durable-code-backend-dev bash -c "cd /app && poetry run xenon --max-absolute B --max-modules B --max-average A app tools" ;; \
		eslint) docker exec durable-code-frontend-dev npm run lint ;; \
		prettier) docker exec durable-code-frontend-dev npm run format:check ;; \
		typecheck) docker exec durable-code-frontend-dev npm run typecheck ;; \
		*) echo "$(RED)Unknown tool: $(TOOL)$(NC)" && exit 1 ;; \
	esac
	@echo "$(GREEN)✓ $(TOOL) completed$(NC)"

# Run custom linters by category
lint-custom: dev-start ## Run custom linters by category (e.g., make lint-custom CAT=solid)
	@if [ -z "$(CAT)" ]; then \
		echo "$(RED)Error: CAT parameter is required$(NC)"; \
		echo "$(YELLOW)Usage: make lint-custom CAT=<category>$(NC)"; \
		echo "$(YELLOW)Available categories: solid, style, literals, logging, loguru$(NC)"; \
		echo "$(YELLOW)Run 'make lint-categories' for details$(NC)"; \
		exit 1; \
	fi
	@echo "$(CYAN)╔════════════════════════════════════════════════════════════╗$(NC)"
	@echo "$(CYAN)║              Custom Linter: $(CAT)                         ║$(NC)"
	@echo "$(CYAN)╚════════════════════════════════════════════════════════════╝$(NC)"
	@docker exec durable-code-backend-dev bash -c "cd /app && PYTHONPATH=/app/tools python -m design_linters --categories $(CAT) --format text --recursive app tools"
	@echo "$(GREEN)✓ Category '$(CAT)' check complete$(NC)"

# Auto-fix formatting issues
lint-fix: dev-start ## Auto-fix linting issues (Black, isort, Ruff, ESLint, Prettier)
	@echo "$(CYAN)Auto-fixing code formatting...$(NC)"
	@echo "$(YELLOW)Fixing Python code...$(NC)"
	@docker exec -u root durable-code-backend-dev bash -c "cd /app && \
		poetry run black app tools && \
		poetry run isort app tools && \
		poetry run ruff check --fix app tools && \
		chown -R 1001:1001 /app/tools"
	@echo "$(YELLOW)Fixing TypeScript/React code...$(NC)"
	@docker exec durable-code-frontend-dev sh -c "\
		npm run lint:fix && \
		npm run format"
	@echo "$(GREEN)✅ Auto-fix complete!$(NC)"

# List all available custom linting rules
lint-list-rules: dev-start ## List all available custom linting rules
	@echo "$(CYAN)╔════════════════════════════════════════════════════════════╗$(NC)"
	@echo "$(CYAN)║                Available Linting Rules                    ║$(NC)"
	@echo "$(CYAN)╚════════════════════════════════════════════════════════════╝$(NC)"
	@docker exec durable-code-backend-dev bash -c "cd /app && PYTHONPATH=/app/tools python -m design_linters --list-rules"

# List all custom rule categories
lint-categories: dev-start ## List all custom rule categories with descriptions
	@echo "$(CYAN)╔════════════════════════════════════════════════════════════╗$(NC)"
	@echo "$(CYAN)║                 Custom Rule Categories                    ║$(NC)"
	@echo "$(CYAN)╚════════════════════════════════════════════════════════════╝$(NC)"
	@docker exec durable-code-backend-dev bash -c "cd /app && PYTHONPATH=/app/tools python -m design_linters --list-categories"
