################################################################################
# Simplified Linting Makefile
################################################################################
#
# Essential linting targets:
#   make lint-all         - Run all common Python/JS linters
#   make lint-tool TOOL=  - Run a specific linter tool
#   make lint-custom CAT= - Run custom linters by category
#   make lint-fix         - Auto-fix formatting issues
#   make lint-list-rules  - List custom linting rules
#   make lint-categories  - List custom rule categories
#
################################################################################

.PHONY: lint-all lint-tool lint-custom lint-fix lint-list-rules lint-categories

# Run all linters: common tools + custom rules
lint-all: dev-start ## Run ALL linters (Python: Black, isort, Ruff, Flake8, MyPy, Pylint, Bandit, Xenon; JS: ESLint, Prettier, TypeScript; CSS: Stylelint; Custom: all design rules including file organization)
	@echo "$(CYAN)╔════════════════════════════════════════════════════════════╗$(NC)"
	@echo "$(CYAN)║                  Running ALL Linters                      ║$(NC)"
	@echo "$(CYAN)╚════════════════════════════════════════════════════════════╝$(NC)"
	@echo ""
	@echo "$(YELLOW)━━━ Python Linters ━━━$(NC)"
	@docker exec durable-code-backend-dev bash -c "cd /app && \
		echo '• Black...' && poetry run black --check app tools && \
		echo '• isort...' && poetry run isort --check-only app tools && \
		echo '• Ruff...' && poetry run ruff check app tools && \
		echo '• Flake8...' && flake8_app=\$$(poetry run flake8 app --count 2>/dev/null || echo '0') && flake8_tools=\$$(poetry run flake8 tools --config tools/.flake8 --count 2>/dev/null || echo '0') && echo \"  App violations: \$$flake8_app, Tools violations: \$$flake8_tools\" && \
		echo '• MyPy...' && MYPY_CACHE_DIR=/tmp/mypy_cache poetry run mypy . && \
		echo '• Pylint...' && poetry run pylint app tools 2>&1 | tee /tmp/pylint.out && grep -q 'Your code has been rated at 10.00/10' /tmp/pylint.out && \
		echo '• Bandit...' && poetry run bandit -r app tools && \
		echo '• Xenon...' && poetry run xenon --max-absolute B --max-modules B --max-average A app" || (echo "$(RED)✗ Python linting failed$(NC)" && exit 1)
	@echo "$(GREEN)✓ Python linting passed$(NC)"
	@echo ""
	@echo "$(YELLOW)━━━ TypeScript/React Linters ━━━$(NC)"
	@docker exec durable-code-frontend-dev sh -c "\
		echo '• TypeScript...' && npm run typecheck && \
		echo '• ESLint...' && npm run lint && \
		echo '• Stylelint...' && npm run lint:css && \
		echo '• Prettier...' && npm run format:check && \
		echo '• HTMLHint...' && htmlhint 'public/**/*.html' 'src/**/*.html' '*.html' --config /.htmlhintrc" || (echo "$(RED)✗ Frontend linting failed$(NC)" && exit 1)
	@echo "$(GREEN)✓ Frontend linting passed$(NC)"
	@echo ""
	@echo "$(YELLOW)━━━ Custom Design Linters ━━━$(NC)"
	@docker exec durable-code-backend-dev bash -c "cd /app && \
		echo '• File headers...' && PYTHONPATH=/app/tools python -m design_linters --rules style.file-header --format text --recursive --fail-on-error . && \
		echo '• SOLID principles...' && PYTHONPATH=/app/tools python -m design_linters --categories solid --format text --recursive --fail-on-error app && \
		echo '• Style rules...' && PYTHONPATH=/app/tools python -m design_linters --categories style --format text --recursive --fail-on-error app && \
		echo '• Magic literals...' && PYTHONPATH=/app/tools python -m design_linters --categories literals --format text --recursive --fail-on-error app && \
		echo '• Logging practices...' && PYTHONPATH=/app/tools python -m design_linters --categories logging --format text --recursive --fail-on-error app && \
		echo '• Loguru usage...' && PYTHONPATH=/app/tools python -m design_linters --categories loguru --format text --recursive --fail-on-error app && \
		echo '• Security rules...' && PYTHONPATH=/app/tools python -m design_linters --categories security --format text --recursive --fail-on-error app && \
		echo '• Error handling...' && PYTHONPATH=/app/tools python -m design_linters --categories error_handling --format text --recursive --fail-on-error app && \
		echo '• Testing practices...' && PYTHONPATH=/app/tools python -m design_linters --categories testing --format text --recursive --fail-on-error test" || (echo "$(RED)✗ Custom linting failed$(NC)" && exit 1)
	@echo "• File organization (checking root)..." && \
		if ls *.py 2>/dev/null 1>&2; then \
			env PYTHONPATH=tools python -m design_linters.cli --categories organization --format text --fail-on-error *.py || (echo "$(RED)✗ File organization check failed$(NC)" && exit 1); \
		else \
			echo "  No Python files in root to check"; \
		fi
	@echo "$(GREEN)✓ Custom design linting passed$(NC)"
	@echo ""
	@echo "$(GREEN)✅ ALL linting checks passed!$(NC)"

# Run a specific linter tool
lint-tool: dev-start ## Run a specific linter tool (e.g., make lint-tool TOOL=black)
	@if [ -z "$(TOOL)" ]; then \
		echo "$(RED)Error: TOOL parameter is required$(NC)"; \
		echo "$(YELLOW)Usage: make lint-tool TOOL=<tool>$(NC)"; \
		echo "$(YELLOW)Available tools:$(NC)"; \
		echo "  Python: black, isort, ruff, flake8, mypy, pylint, bandit, radon, xenon"; \
		echo "  Frontend: eslint, prettier, typecheck, htmlhint"; \
		exit 1; \
	fi
	@echo "$(CYAN)Running $(TOOL)...$(NC)"
	@case "$(TOOL)" in \
		black) docker exec durable-code-backend-dev bash -c "cd /app && poetry run black --check app tools" ;; \
		isort) docker exec durable-code-backend-dev bash -c "cd /app && poetry run isort --check-only app tools" ;; \
		ruff) docker exec durable-code-backend-dev bash -c "cd /app && poetry run ruff check app tools" ;; \
		flake8) docker exec durable-code-backend-dev bash -c "cd /app && echo 'Checking app...' && flake8_app=\$$(poetry run flake8 app --count 2>/dev/null || echo '0') && echo \"App violations: \$$flake8_app\" && echo 'Checking tools...' && flake8_tools=\$$(poetry run flake8 tools --config tools/.flake8 --count 2>/dev/null || echo '0') && echo \"Tools violations: \$$flake8_tools\"" ;; \
		mypy) docker exec durable-code-backend-dev bash -c "cd /app && MYPY_CACHE_DIR=/tmp/mypy_cache poetry run mypy ." ;; \
		pylint) docker exec durable-code-backend-dev bash -c "cd /app && poetry run pylint app tools" ;; \
		bandit) docker exec durable-code-backend-dev bash -c "cd /app && poetry run bandit -r app tools" ;; \
		radon) docker exec durable-code-backend-dev bash -c "cd /app && poetry run radon cc app tools -s -n A" ;; \
		xenon) docker exec durable-code-backend-dev bash -c "cd /app && poetry run xenon --max-absolute B --max-modules B --max-average A app" ;; \
		eslint) docker exec durable-code-frontend-dev npm run lint ;; \
		prettier) docker exec durable-code-frontend-dev npm run format:check ;; \
		typecheck) docker exec durable-code-frontend-dev npm run typecheck ;; \
		htmlhint) docker exec durable-code-frontend-dev sh -c "htmlhint 'public/**/*.html' 'src/**/*.html' '*.html' --config /.htmlhintrc" ;; \
		*) echo "$(RED)Unknown tool: $(TOOL)$(NC)" && exit 1 ;; \
	esac
	@echo "$(GREEN)✓ $(TOOL) completed$(NC)"

# Run custom linters by category
lint-custom: dev-start ## Run custom linters by category (e.g., make lint-custom CAT=solid)
	@if [ -z "$(CAT)" ]; then \
		echo "$(RED)Error: CAT parameter is required$(NC)"; \
		echo "$(YELLOW)Usage: make lint-custom CAT=<category>$(NC)"; \
		echo "$(YELLOW)Available categories: solid, style, literals, logging, loguru, organization, security, error_handling$(NC)"; \
		echo "$(YELLOW)Run 'make lint-categories' for details$(NC)"; \
		exit 1; \
	fi
	@echo "$(CYAN)╔════════════════════════════════════════════════════════════╗$(NC)"
	@echo "$(CYAN)║              Custom Linter: $(CAT)                         ║$(NC)"
	@echo "$(CYAN)╚════════════════════════════════════════════════════════════╝$(NC)"
	@docker exec durable-code-backend-dev bash -c "cd /app && PYTHONPATH=/app/tools python -m design_linters --categories $(CAT) --format text --recursive app"
	@echo "$(GREEN)✓ Category '$(CAT)' check complete$(NC)"

# Auto-fix formatting issues
lint-fix: dev-start ## Auto-fix linting issues (Black, isort, Ruff, ESLint, Prettier, Stylelint)
	@echo "$(CYAN)Auto-fixing code formatting...$(NC)"
	@echo "$(YELLOW)Fixing Python code...$(NC)"
	@docker exec -u root durable-code-backend-dev bash -c "cd /app && \
		poetry run black app tools && \
		poetry run isort app tools && \
		poetry run ruff check --fix app tools && \
		chown -R 1001:1001 /app/tools"
	@echo "$(YELLOW)Fixing TypeScript/React code...$(NC)"
	@docker exec durable-code-frontend-dev sh -c "\
		npm run lint:fix && \
		npm run lint:css:fix && \
		npm run format"
	@echo "$(GREEN)✅ Auto-fix complete!$(NC)"

# List all available custom linting rules
lint-list-rules: dev-start ## List all available custom linting rules
	@echo "$(CYAN)╔════════════════════════════════════════════════════════════╗$(NC)"
	@echo "$(CYAN)║                Available Linting Rules                    ║$(NC)"
	@echo "$(CYAN)╚════════════════════════════════════════════════════════════╝$(NC)"
	@docker exec durable-code-backend-dev bash -c "cd /app && PYTHONPATH=/app/tools python -m design_linters --list-rules"

# List all custom rule categories
lint-categories: dev-start ## List all custom rule categories with descriptions
	@echo "$(CYAN)╔════════════════════════════════════════════════════════════╗$(NC)"
	@echo "$(CYAN)║                 Custom Rule Categories                    ║$(NC)"
	@echo "$(CYAN)╚════════════════════════════════════════════════════════════╝$(NC)"
	@docker exec durable-code-backend-dev bash -c "cd /app && PYTHONPATH=/app/tools python -m design_linters --list-categories"

# Run all linters on staged files only (for pre-commit hooks and lint watcher)
lint-all-staged: dev-start ## Run all linters on staged files only
	@echo "$(CYAN)╔════════════════════════════════════════════════════════════╗$(NC)"
	@echo "$(CYAN)║           Running Linters on Staged Files                 ║$(NC)"
	@echo "$(CYAN)╚════════════════════════════════════════════════════════════╝$(NC)"
	@echo ""
	@# Get list of staged Python files
	@STAGED_PY=$$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.py$$' | tr '\n' ' '); \
	STAGED_TS=$$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(ts|tsx|js|jsx)$$' | tr '\n' ' '); \
	if [ -z "$$STAGED_PY" ] && [ -z "$$STAGED_TS" ]; then \
		echo "$(YELLOW)No staged files to lint$(NC)"; \
		exit 0; \
	fi; \
	if [ -n "$$STAGED_PY" ]; then \
		echo "$(YELLOW)━━━ Python Linters ($$STAGED_PY)━━━$(NC)"; \
		docker exec durable-code-backend-dev bash -c "cd /app && \
			echo '• Black...' && poetry run black --check $$STAGED_PY && \
			echo '• isort...' && poetry run isort --check-only $$STAGED_PY && \
			echo '• Ruff...' && poetry run ruff check $$STAGED_PY && \
			echo '• Flake8...' && poetry run flake8 $$STAGED_PY && \
			echo '• MyPy...' && MYPY_CACHE_DIR=/tmp/mypy_cache poetry run mypy $$STAGED_PY && \
			echo '• Pylint...' && poetry run pylint $$STAGED_PY && \
			echo '• Bandit...' && poetry run bandit -r $$STAGED_PY && \
			echo '• Xenon...' && poetry run xenon --max-absolute B --max-modules B --max-average A $$STAGED_PY 2>/dev/null || true && \
			echo '• Custom Design Linters...' && PYTHONPATH=/app/tools python -m design_linters --format text $$STAGED_PY" || (echo "$(RED)✗ Python linting failed$(NC)" && exit 1); \
		echo "$(GREEN)✓ Python linting passed$(NC)"; \
		echo ""; \
	fi; \
	if [ -n "$$STAGED_TS" ]; then \
		echo "$(YELLOW)━━━ TypeScript/React Linters ━━━$(NC)"; \
		docker exec durable-code-frontend-dev sh -c "\
			echo '• ESLint...' && npx eslint $$STAGED_TS && \
			echo '• Prettier...' && npx prettier --check $$STAGED_TS && \
			echo '• TypeScript...' && npx tsc --noEmit" || (echo "$(RED)✗ Frontend linting failed$(NC)" && exit 1); \
		echo "$(GREEN)✓ Frontend linting passed$(NC)"; \
	fi; \
	echo "$(GREEN)✅ Staged files linting complete!$(NC)"

# Watch for file changes and run linters automatically (dashboard style)
lint-watch: dev-start ## Start lint watcher with dashboard UI
	@echo "$(CYAN)Starting Lint Watch Dashboard...$(NC)"
	@bash scripts/lint-watch-dashboard.sh

# Simple lint watcher without dashboard
lint-watch-simple: dev-start ## Start simple lint watcher (runs every 30 seconds)
	@echo "$(CYAN)Starting Simple Lint Watcher...$(NC)"
	@echo "$(YELLOW)Will run 'make lint-all' every 30 seconds. Press Ctrl+C to stop.$(NC)"
	@while true; do \
		clear; \
		echo "$(CYAN)════════════════════════════════════════════════════════════$(NC)"; \
		echo "$(CYAN)     Lint Check at $$(date +"%H:%M:%S")$(NC)"; \
		echo "$(CYAN)════════════════════════════════════════════════════════════$(NC)"; \
		$(MAKE) lint-all 2>&1 | tee /tmp/lint-watch.log; \
		if [ $$? -eq 0 ]; then \
			echo ""; \
			echo "$(GREEN)✅ All linting checks passed!$(NC)"; \
		else \
			echo ""; \
			echo "$(RED)❌ Linting errors detected!$(NC)"; \
			if command -v osascript &> /dev/null; then \
				osascript -e 'display notification "Linting errors detected!" with title "Lint Watch" sound name "Basso"' 2>/dev/null; \
			elif command -v notify-send &> /dev/null; then \
				notify-send -u critical "Lint Watch" "Linting errors detected!" 2>/dev/null; \
			fi; \
		fi; \
		echo ""; \
		echo "$(GRAY)Next check in 30 seconds... (Press Ctrl+C to stop)$(NC)"; \
		sleep 30; \
	done
