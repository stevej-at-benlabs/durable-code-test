"""
{{MODULE_NAME}} Exception Hierarchy Template

This template provides a structured exception hierarchy for backend services.
Replace {{PLACEHOLDER}} variables with your specific values.

Purpose: Define custom exceptions with proper error codes and status codes
Location: durable-code-app/backend/app/core/exceptions.py
Example: app/core/exceptions.py
"""

from typing import Any, Optional
from fastapi import status


class {{BASE_NAME}}Exception(Exception):
    """
    Base exception for {{MODULE_NAME}} errors.

    Provides structured error information including:
    - Status code for HTTP responses
    - Error code for client identification
    - Human-readable message
    - Optional details for debugging
    """

    def __init__(
        self,
        message: str,
        status_code: int = status.HTTP_500_INTERNAL_SERVER_ERROR,
        error_code: str = "{{MODULE_CODE}}_ERROR",
        details: Optional[dict[str, Any]] = None,
    ) -> None:
        """Initialize the exception with structured error information."""
        super().__init__(message)
        self.message = message
        self.status_code = status_code
        self.error_code = error_code
        self.details = details or {}


class {{MODULE_NAME}}ValidationError({{BASE_NAME}}Exception):
    """Exception for {{MODULE_NAME}} input validation failures."""

    def __init__(
        self,
        message: str = "Invalid {{MODULE_NAME}} input",
        details: Optional[dict[str, Any]] = None,
    ) -> None:
        """Initialize validation error."""
        super().__init__(
            message=message,
            status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
            error_code="{{MODULE_CODE}}_VALIDATION_ERROR",
            details=details,
        )


class {{MODULE_NAME}}NotFoundError({{BASE_NAME}}Exception):
    """Exception for {{MODULE_NAME}} resource not found."""

    def __init__(
        self,
        message: str = "{{MODULE_NAME}} resource not found",
        resource_id: Optional[str] = None,
    ) -> None:
        """Initialize not found error."""
        details = {}
        if resource_id:
            details["resource_id"] = resource_id

        super().__init__(
            message=message,
            status_code=status.HTTP_404_NOT_FOUND,
            error_code="{{MODULE_CODE}}_NOT_FOUND",
            details=details,
        )


class {{MODULE_NAME}}ConflictError({{BASE_NAME}}Exception):
    """Exception for {{MODULE_NAME}} resource conflicts."""

    def __init__(
        self,
        message: str = "{{MODULE_NAME}} resource conflict",
        details: Optional[dict[str, Any]] = None,
    ) -> None:
        """Initialize conflict error."""
        super().__init__(
            message=message,
            status_code=status.HTTP_409_CONFLICT,
            error_code="{{MODULE_CODE}}_CONFLICT",
            details=details,
        )


class {{MODULE_NAME}}ServiceError({{BASE_NAME}}Exception):
    """Exception for {{MODULE_NAME}} service layer errors."""

    def __init__(
        self,
        message: str = "{{MODULE_NAME}} service error",
        details: Optional[dict[str, Any]] = None,
    ) -> None:
        """Initialize service error."""
        super().__init__(
            message=message,
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            error_code="{{MODULE_CODE}}_SERVICE_ERROR",
            details=details,
        )


# Export all exceptions
__all__ = [
    "{{BASE_NAME}}Exception",
    "{{MODULE_NAME}}ValidationError",
    "{{MODULE_NAME}}NotFoundError",
    "{{MODULE_NAME}}ConflictError",
    "{{MODULE_NAME}}ServiceError",
]
