name: Print Statement Check

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main]

jobs:
  check-print-statements:
    name: Detect Print Statements
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Check Python files for print statements
        run: |
          python tools/design-linters/print_statement_linter.py \
            --path . \
            --recursive \
            --format github \
            --no-skip-tests \
            --strict || exit_code=$?
          
          if [ "${exit_code:-0}" -ne 0 ]; then
            echo "❌ Print statements detected in code!"
            echo "Please use loguru for Python or appropriate logging libraries for JavaScript/TypeScript"
            echo "See docs/STANDARDS.md for logging guidelines"
            exit 1
          fi
          
          echo "✅ No print statements found"

      - name: Generate detailed report
        if: failure()
        run: |
          echo "## 📊 Print Statement Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          python tools/design-linters/print_statement_linter.py \
            --path . \
            --recursive \
            --no-skip-tests \
            --format text >> $GITHUB_STEP_SUMMARY || true

      - name: Check specific directories
        run: |
          echo "Checking backend code (including tests)..."
          python tools/design-linters/print_statement_linter.py \
            --path durable-code-app/backend \
            --recursive \
            --no-skip-tests \
            --format text
          
          echo "Checking frontend code (including tests)..."
          python tools/design-linters/print_statement_linter.py \
            --path durable-code-app/frontend \
            --recursive \
            --no-skip-tests \
            --format text
          
          echo "Checking tools (including tests)..."
          python tools/design-linters/print_statement_linter.py \
            --path tools \
            --recursive \
            --no-skip-tests \
            --format text
          
          echo "Checking test directory..."
          python tools/design-linters/print_statement_linter.py \
            --path test \
            --recursive \
            --no-skip-tests \
            --format text

      - name: Comment on PR
        if: github.event_name == 'pull_request' && failure()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Run the linter and capture output
            const { execSync } = require('child_process');
            let report = '';
            try {
              report = execSync('python tools/design-linters/print_statement_linter.py --path . --recursive --no-skip-tests --format json').toString();
            } catch (error) {
              report = error.stdout ? error.stdout.toString() : '{}';
            }
            
            let data;
            try {
              data = JSON.parse(report);
            } catch {
              data = { total_violations: 0, violations: [] };
            }
            
            if (data.total_violations > 0) {
              let comment = '## ⚠️ Print Statements Detected\n\n';
              comment += `Found ${data.total_violations} print statement(s) in the code.\n\n`;
              comment += '### Required Actions:\n';
              comment += '- **Python**: Replace `print()` with `loguru` - `from loguru import logger`\n';
              comment += '- **JavaScript/TypeScript**: Remove `console.log()` or use a proper logging library\n\n';
              comment += '### Violations:\n';
              
              // Group by file
              const byFile = {};
              data.violations.forEach(v => {
                if (!byFile[v.file]) byFile[v.file] = [];
                byFile[v.file].push(v);
              });
              
              Object.entries(byFile).forEach(([file, violations]) => {
                comment += `\n**${file}**\n`;
                violations.forEach(v => {
                  comment += `- Line ${v.line}: \`${v.statement}\`\n`;
                });
              });
              
              comment += '\n### 📚 Resources:\n';
              comment += '- [Logging Standards Documentation](docs/STANDARDS.md#logging-standards---no-print-statements)\n';
              comment += '- [Loguru Documentation](https://github.com/Delgan/loguru)\n';
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }