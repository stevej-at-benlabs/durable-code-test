name: Comprehensive Linting & Quality Checks

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main]

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "20"
  POETRY_VERSION: "1.7.1"

jobs:
  python-quality:
    name: Python Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached dependencies
        uses: actions/cache@v3
        with:
          path: |
            durable-code-app/backend/.venv
            ~/.cache/pypoetry
          key: python-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            python-${{ runner.os }}-

      - name: Install dependencies
        working-directory: ./durable-code-app/backend
        run: poetry install --with dev

      - name: Run Black (formatting)
        working-directory: ./durable-code-app/backend
        run: poetry run black --check .

      - name: Run isort (import sorting)
        working-directory: ./durable-code-app/backend
        run: poetry run isort --check-only .

      - name: Run Ruff (fast linting)
        working-directory: ./durable-code-app/backend
        run: poetry run ruff check .

      - name: Run Flake8 (style guide)
        working-directory: ./durable-code-app/backend
        run: poetry run flake8 .

      - name: Run MyPy (type checking)
        working-directory: ./durable-code-app/backend
        run: poetry run mypy app

      - name: Run Pylint
        working-directory: ./durable-code-app/backend
        run: poetry run pylint app || true # Warning only for now

      - name: Run Bandit (security linting)
        working-directory: ./durable-code-app/backend
        run: poetry run bandit -r app

      - name: Check Radon Complexity (must be A)
        working-directory: ./durable-code-app/backend
        run: |
          poetry run radon cc app -n A -s
          poetry run radon mi app -n A -s

      - name: Run Xenon (complexity threshold)
        working-directory: ./durable-code-app/backend
        run: poetry run xenon --max-absolute A --max-modules A --max-average A app

      - name: Check dependencies with Safety
        working-directory: ./durable-code-app/backend
        run: poetry run safety check || true # Warning only

      - name: Generate complexity report
        working-directory: ./durable-code-app/backend
        if: always()
        run: |
          echo "## Python Complexity Report" >> $GITHUB_STEP_SUMMARY
          echo "### Cyclomatic Complexity" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          poetry run radon cc app -s >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "### Maintainability Index" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          poetry run radon mi app -s >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  typescript-quality:
    name: TypeScript/React Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: |
            durable-code-app/frontend/node_modules
            ~/.npm
          key: node-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            node-${{ runner.os }}-

      - name: Install dependencies
        working-directory: ./durable-code-app/frontend
        run: npm ci

      - name: TypeScript compilation check
        working-directory: ./durable-code-app/frontend
        run: npm run typecheck

      - name: Run ESLint
        working-directory: ./durable-code-app/frontend
        run: npm run lint

      - name: Check Prettier formatting
        working-directory: ./durable-code-app/frontend
        run: npm run format:check

      - name: Security audit
        working-directory: ./durable-code-app/frontend
        run: npm audit --audit-level=moderate || true # Warning only

      - name: Generate frontend report
        if: always()
        run: |
          echo "## Frontend Quality Report" >> $GITHUB_STEP_SUMMARY
          echo "✅ TypeScript and React linting completed" >> $GITHUB_STEP_SUMMARY

  code-coverage:
    name: Code Coverage Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Install Python dependencies
        working-directory: ./durable-code-app/backend
        run: poetry install --with dev

      - name: Run Python tests with coverage
        working-directory: ./durable-code-app/backend
        run: |
          poetry run pytest --cov=app --cov-report=xml --cov-report=term-missing || true

      - name: Upload Python coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./durable-code-app/backend/coverage.xml
          flags: python
          fail_ci_if_error: false

  quality-gate:
    name: Quality Gate Check
    needs: [python-quality, typescript-quality]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check quality gate status
        run: |
          if [[ "${{ needs.python-quality.result }}" == "failure" ]] || [[ "${{ needs.typescript-quality.result }}" == "failure" ]]; then
            echo "❌ Quality gate failed! Code does not meet standards."
            echo "## ❌ Quality Gate Failed" >> $GITHUB_STEP_SUMMARY
            echo "The code does not meet the required quality standards." >> $GITHUB_STEP_SUMMARY
            echo "Please fix all linting issues before merging." >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "✅ Quality gate passed! Code meets all standards."
            echo "## ✅ Quality Gate Passed" >> $GITHUB_STEP_SUMMARY
            echo "All code quality checks have passed successfully!" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Python linting and complexity checks (Radon Grade A)" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ TypeScript/React linting" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Security checks" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Formatting validation" >> $GITHUB_STEP_SUMMARY
          fi
